{"version":3,"file":"stories-atoms-slider-stories.5d0adee9938d415f3560.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AAGA;AACA;AAEA","sources":["webpack://storybook-react/./src/stories/atoms/slider.stories.tsx","webpack://storybook-react/./src/feature/atoms/slider/slider.component.tsx"],"sourcesContent":["import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { SliderComponent } from '../../feature/atoms/slider/slider.component';\n\nconst meta: Meta<typeof SliderComponent> = {\n  title: 'Atoms/SliderComponent',\n  component: SliderComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    theme: {\n      options: ['light-theme', 'dark-theme'],\n      control: { type: 'radio' },\n      table: { defaultValue: { summary: 'light-theme' } },\n    },\n    disabled: {\n      table: { defaultValue: { summary: 'false' } },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = Story<typeof SliderComponent>;\n\nexport const LightTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Light Theme' },\n  },\n  args: {\n    disabled: false,\n    theme: 'light-theme',\n  },\n};\n\nexport const DarkTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Dark Theme' },\n  },\n  args: {\n    disabled: false,\n    theme: 'dark-theme',\n  },\n};\n","import React, { Component } from 'react';\n\ninterface SliderComponentProps {\n  theme: string;\n  disabled: boolean;\n  onSendProgress: (value: string) => void;\n}\n\nclass SliderComponent extends Component<SliderComponentProps> {\n  private scrollbarRef: React.RefObject<HTMLInputElement>;\n  private scrollTrackRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: SliderComponentProps) {\n    super(props);\n    this.scrollbarRef = React.createRef<HTMLInputElement>();\n    this.scrollTrackRef = React.createRef<HTMLDivElement>();\n\n    this.onInput = this.onInput.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateScrollTrack();\n  }\n\n  updateScrollTrack() {\n    const { onSendProgress } = this.props;\n\n    if (this.scrollTrackRef.current && this.scrollbarRef.current) {\n      const value = this.scrollbarRef.current.value;\n      this.scrollTrackRef.current.style.width = `${value}%`;\n      onSendProgress(value);\n    }\n  }\n\n  onInput() {\n    const { onSendProgress } = this.props;\n\n    if (this.scrollTrackRef.current && this.scrollbarRef.current) {\n      const value = this.scrollbarRef.current.value;\n      this.scrollTrackRef.current.style.width = `${value}%`;\n      onSendProgress(value);\n    }\n  }\n\n  render() {\n    const { theme, disabled } = this.props;\n\n    const classes = disabled\n      ? `slider--${theme} slider--disabled--${theme}`\n      : `slider--${theme}`;\n\n    return (\n      <div className={`slider-container ${classes}`}>\n        <input\n          ref={this.scrollbarRef}\n          onInput={this.onInput}\n          disabled={disabled}\n          type=\"range\"\n          className=\"slider\"\n          id=\"myRange\"\n        />\n        <div ref={this.scrollTrackRef} className=\"scroll-div\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SliderComponent;\n"],"names":[],"sourceRoot":""}