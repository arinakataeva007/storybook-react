{"version":3,"file":"stories-atoms-toggle-check-stories.e9d8757aba60be2c2b78.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAIA;AACA;AAEA","sources":["webpack://storybook-react/./src/stories/atoms/toggle-check.stories.tsx","webpack://storybook-react/./src/feature/atoms/toggle-check/toggle-check.tsx"],"sourcesContent":["import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport {ToggleCheckComponent} from '../../feature/atoms/toggle-check/toggle-check';\n\n// Define the metadata for the ToggleCheckComponent story\nconst meta: Meta<typeof ToggleCheckComponent> = {\n  title: 'Atoms/ToggleCheckComponent',\n  component: ToggleCheckComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    theme: {\n      options: ['light-theme', 'dark-theme'],\n      control: { type: 'radio' },\n      table: { defaultValue: { summary: 'light-theme' } },\n    },\n    disabled: {\n      table: { defaultValue: { summary: 'false' } },\n    },\n  },\n};\n\nexport default meta;\n\n// Define the story type\ntype Story = Story<typeof ToggleCheckComponent>;\n\n// Define the LightTheme story\nexport const LightTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Light Theme' },\n  },\n  args: {\n    toggleId: 'test1',\n    disabled: false,\n    theme: 'light-theme',\n  },\n};\n\n// Define the DarkTheme story\nexport const DarkTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Dark Theme' },\n  },\n  args: {\n    toggleId: 'test1',\n    disabled: false,\n    theme: 'dark-theme',\n  },\n};\n","import React, { Component } from 'react';\n\ninterface ToggleCheckProps {\n  toggleId: string;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  onBlur: () => void;\n  disabled?: boolean;\n  theme: string;\n}\n\ninterface ToggleCheckState {\n  value: boolean;\n  touched: boolean;\n}\n\nclass ToggleCheckComponent extends Component<ToggleCheckProps, ToggleCheckState> {\n  constructor(props: ToggleCheckProps) {\n    super(props);\n    this.state = {\n      value: this.props.value || false,\n      touched: false,\n    };\n  }\n\n  // Simulate Angular's ControlValueAccessor methods\n  static getDerivedStateFromProps(nextProps: ToggleCheckProps, nextState: ToggleCheckState) {\n    if (nextProps.value !== nextState.value) {\n      return {\n        value: nextProps.value,\n      };\n    }\n    return null;\n  }\n\n  // Handles changes in the checkbox\n  handleCheckChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.checked;\n    this.setState({ value: newValue }, () => {\n      this.props.onChange(newValue);\n      this.props.onBlur();\n    });\n  };\n\n  // Handle the blur event\n  handleBlur = () => {\n    if (!this.state.touched) {\n      this.setState({ touched: true }, () => {\n        this.props.onBlur();\n      });\n    }\n  };\n\n  render() {\n    const { toggleId, disabled, theme } = this.props;\n    const { value } = this.state;\n\n    // Apply class names based on the theme and disabled state\n    const toggleClass = disabled\n      ? `toggle--${theme} toggle--disabled--${theme}`\n      : `toggle--${theme}`;\n\n    return (\n      <div>\n        <input\n          id={toggleId}\n          type=\"checkbox\"\n          checked={value}\n          onChange={this.handleCheckChange}\n          onBlur={this.handleBlur}\n          disabled={disabled}\n          className=\"toggle-check\"\n        />\n        <label\n          htmlFor={toggleId}\n          className={`toggle-btn ${toggleClass}`}\n        ></label>\n      </div>\n    );\n  }\n}\n\nexport default ToggleCheckComponent;\n"],"names":[],"sourceRoot":""}