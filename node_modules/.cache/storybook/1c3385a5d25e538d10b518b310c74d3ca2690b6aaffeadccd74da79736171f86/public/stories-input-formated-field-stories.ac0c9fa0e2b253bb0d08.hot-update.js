"use strict";
self["webpackHotUpdatestorybook_react"]("stories-input-formated-field-stories",{

/***/ "./src/stories/input/formated-field.stories.tsx":
/*!******************************************************!*\
  !*** ./src/stories/input/formated-field.stories.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DarkTheme: () => (/* binding */ DarkTheme),
/* harmony export */   LightTheme: () => (/* binding */ LightTheme),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _feature_input_formated_text_formated_text_field_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../feature/input/formated-text/formated-text-field.component */ "./src/feature/input/formated-text/formated-text-field.component.tsx");


const meta = {
  title: 'Input/FormatedTextField',
  component: _feature_input_formated_text_formated_text_field_component__WEBPACK_IMPORTED_MODULE_1__.FormatedTextField,
  parameters: {
    designToken: {
      disable: true
    }
  },
  argTypes: {
    theme: {
      options: ['light-theme', 'dark-theme'],
      control: {
        type: 'radio'
      },
      table: {
        defaultValue: {
          summary: 'light-theme'
        }
      }
    },
    disabled: {
      table: {
        defaultValue: {
          summary: 'false'
        }
      }
    },
    onInput: {
      description: 'Callback - triggered on every input change'
    },
    onChange: {
      description: 'Callback - triggered when the field value changes'
    },
    placeholder: {
      description: 'Placeholder text for the input field'
    }
  },
  decorators: [Story => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    style: {
      width: '300px'
    }
  }, Story())],
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const LightTheme = {
  parameters: {
    backgrounds: {
      default: 'Light Theme'
    }
  },
  args: {
    placeholder: 'Placeholder',
    disabled: false,
    theme: 'light-theme',
    textRich: 'Информация, которую запросил пользователь. Очень короткий поясняющий текст к ней.'
  }
};
const DarkTheme = {
  parameters: {
    backgrounds: {
      default: 'Dark Theme'
    }
  },
  args: {
    placeholder: 'Placeholder',
    disabled: false,
    theme: 'dark-theme'
  }
};
;
const __namedExportsOrder = ["LightTheme", "DarkTheme"];
LightTheme.parameters = {
  ...LightTheme.parameters,
  docs: {
    ...LightTheme.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    backgrounds: {\n      default: 'Light Theme'\n    }\n  },\n  args: {\n    placeholder: 'Placeholder',\n    disabled: false,\n    theme: 'light-theme',\n    textRich: '\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F, \u043A\u043E\u0442\u043E\u0440\u0443\u044E \u0437\u0430\u043F\u0440\u043E\u0441\u0438\u043B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C. \u041E\u0447\u0435\u043D\u044C \u043A\u043E\u0440\u043E\u0442\u043A\u0438\u0439 \u043F\u043E\u044F\u0441\u043D\u044F\u044E\u0449\u0438\u0439 \u0442\u0435\u043A\u0441\u0442 \u043A \u043D\u0435\u0439.'\n  }\n}",
      ...LightTheme.parameters?.docs?.source
    }
  }
};
DarkTheme.parameters = {
  ...DarkTheme.parameters,
  docs: {
    ...DarkTheme.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    backgrounds: {\n      default: 'Dark Theme'\n    }\n  },\n  args: {\n    placeholder: 'Placeholder',\n    disabled: false,\n    theme: 'dark-theme'\n  }\n}",
      ...DarkTheme.parameters?.docs?.source
    }
  }
};

/***/ }),

/***/ "./src/feature/input/formated-text/formated-text-field.component.tsx":
/*!***************************************************************************!*\
  !*** ./src/feature/input/formated-text/formated-text-field.component.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormatedTextField: () => (/* binding */ FormatedTextField),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _floating_rich_tooltil_rich_tooltip_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../floating/rich-tooltil/rich-tooltip.component */ "./src/feature/floating/rich-tooltil/rich-tooltip.component.tsx");
/* harmony import */ var _buttons_base_button_base_button_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../buttons/base-button/base-button.component */ "./src/feature/buttons/base-button/base-button.component.tsx");



const FormatedTextField = ({ placeholder = "", rlValue = "", onChange, onInput, disabled = false, theme = "light-theme", textRich, tailPlacement })=>{
    let [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("");
    let [maxLength, setMaxLength] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(placeholder.length);
    let [richIsOpen, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    let [onInputs, setOnInputs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    let [constPlaceholder, setPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(placeholder);
    const fieldRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const richTooltip = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const errorIcon = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (value !== "" && rlValue && !onInputs) {
            constPlaceholder = "";
        } else if (!onInputs) {
            constPlaceholder = placeholder;
        }
        onChange(rlValue);
    }, [
        rlValue
    ]);
    const replaceSymbol = (event)=>{
        onInputs = true;
        const index = event.target.value.length - 1;
        if (fieldRef.current) {
            if (event.target.value == "" || !event.target.value) {
                constPlaceholder = placeholder;
            } else if (constPlaceholder === placeholder || event.target.value !== "" && constPlaceholder !== "") {
                const arrPlaceholder = constPlaceholder.split("");
                arrPlaceholder[index] = fieldRef.current.value[index];
                constPlaceholder = arrPlaceholder.join("");
            }
        }
    };
    const onChangeInput = (event)=>{
        if (rlValue != "" && rlValue) {
            constPlaceholder = "";
        } else {
            constPlaceholder = placeholder;
        }
        onChange(event.target.value);
        onInputs = false;
    };
    const closeTooltip = (event)=>{
        setOpen(richIsOpen = !richIsOpen);
    };
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("section", {
        className: "formated-field"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {
        className: "placeholder"
    }, constPlaceholder), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
        ref: fieldRef,
        className: "input",
        type: "text",
        disabled: disabled,
        minLength: maxLength,
        onChange: onChangeInput,
        onInput: replaceSymbol
    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: errorIcon,
        className: "errorName"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_buttons_base_button_base_button_component__WEBPACK_IMPORTED_MODULE_2__.BaseButton, {
        name: "question_mark",
        size: "base",
        theme: theme,
        onAction: closeTooltip
    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "richTooltip",
        ref: richTooltip
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_floating_rich_tooltil_rich_tooltip_component__WEBPACK_IMPORTED_MODULE_1__.RichTooltip, {
        theme: theme,
        tailPlacement: tailPlacement,
        textRich: textRich,
        onHandleCloseClick: ()=>closeTooltip
    })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormatedTextField);
FormatedTextField.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "FormatedTextField",
    "props": {
        "theme": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "\"light-theme\" | \"dark-theme\"",
                "elements": [
                    {
                        "name": "literal",
                        "value": "\"light-theme\""
                    },
                    {
                        "name": "literal",
                        "value": "\"dark-theme\""
                    }
                ]
            },
            "description": "",
            "defaultValue": {
                "value": "\"light-theme\"",
                "computed": false
            }
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": "",
            "defaultValue": {
                "value": "false",
                "computed": false
            }
        },
        "textRich": {
            "required": true,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "tailPlacement": {
            "required": true,
            "tsType": {
                "name": "union",
                "raw": "\"R\" | \"D\" | \"U\" | \"L\"",
                "elements": [
                    {
                        "name": "literal",
                        "value": "\"R\""
                    },
                    {
                        "name": "literal",
                        "value": "\"D\""
                    },
                    {
                        "name": "literal",
                        "value": "\"U\""
                    },
                    {
                        "name": "literal",
                        "value": "\"L\""
                    }
                ]
            },
            "description": ""
        },
        "onHandleCloseClick": {
            "required": true,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "(event: boolean) =>{}",
                "signature": {
                    "arguments": [
                        {
                            "type": {
                                "name": "boolean"
                            },
                            "name": "event"
                        }
                    ],
                    "return": {
                        "name": "signature",
                        "type": "object",
                        "raw": "{}",
                        "signature": {
                            "properties": []
                        }
                    }
                }
            },
            "description": ""
        },
        "placeholder": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": "",
            "defaultValue": {
                "value": "\"\"",
                "computed": false
            }
        },
        "rlValue": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": "",
            "defaultValue": {
                "value": "\"\"",
                "computed": false
            }
        },
        "onChange": {
            "required": true,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "(value: string) => void",
                "signature": {
                    "arguments": [
                        {
                            "type": {
                                "name": "string"
                            },
                            "name": "value"
                        }
                    ],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "onInput": {
            "required": true,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "(value: string) => void",
                "signature": {
                    "arguments": [
                        {
                            "type": {
                                "name": "string"
                            },
                            "name": "value"
                        }
                    ],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        }
    }
};


/***/ })

});
//# sourceMappingURL=stories-input-formated-field-stories.ac0c9fa0e2b253bb0d08.hot-update.js.map