{"version":3,"file":"stories-input-formated-field-stories.36dbb3da9593f0516e23.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AAIA;AACA;AAQA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;AAMA;AACA","sources":["webpack://storybook-react/./src/feature/input/formated-text/formated-text-field.style.scss","webpack://storybook-react/./src/feature/input/formated-text/formated-text-field.style.scss?556c","webpack://storybook-react/./src/feature/input/formated-text/formated-text-field.component.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ``, \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./formated-text-field.style.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./formated-text-field.style.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./formated-text-field.style.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  RichTooltip,\n  RichTooltipProps,\n} from \"../../floating/rich-tooltil/rich-tooltip.component\";\nimport { BaseButton } from \"../../buttons/base-button/base-button.component\";\nimport './formated-text-field.style.scss';\n\ninterface FormatedTextProps extends RichTooltipProps {\n  placeholder?: string;\n  rlValue: string;\n  onInput: (value: string) => void;\n}\n\nexport const FormatedTextField: React.FC<FormatedTextProps> = ({\n  placeholder = \"\",\n  rlValue = \"\",\n  onInput,\n  disabled = false,\n  theme = \"light-theme\",\n  textRich,\n}) => {\n  let [value, setValue] = useState(\"\");\n  let [maxLength, setMaxLength] = useState(placeholder.length);\n  let [richIsOpen, setOpen] = useState(false);\n  let [onInputs, setOnInputs] = useState(false);\n  let [constPlaceholder, setPlaceholder] = useState(placeholder);\n\n  const fieldRef = useRef<HTMLInputElement | null>(null);\n  const richTooltip = useRef<HTMLDivElement | null>(null);\n  const errorIcon = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (value !== \"\" && rlValue && !onInputs) {\n      constPlaceholder = \"\";\n    } else if (!onInputs) {\n      constPlaceholder = placeholder;\n    }\n  }, [rlValue]);\n\n  const replaceSymbol = (event: any) => {\n    onInputs = true;\n    setValue((value = event.target.value));\n    const index = event.target.value.length - 1;\n    if (fieldRef.current) {\n      if (event.target.value == \"\" || !event.target.value) {\n        setPlaceholder((constPlaceholder = placeholder));\n      } else if (\n        constPlaceholder === placeholder ||\n        (event.target.value !== \"\" && constPlaceholder !== \"\")\n      ) {\n        const arrPlaceholder = constPlaceholder.split(\"\");\n        arrPlaceholder[index] = fieldRef.current.value[index];\n        setPlaceholder((constPlaceholder = arrPlaceholder.join(\"\")));\n      }\n    }\n  };\n  const onChangeInput = (event: any) => {\n    if (rlValue != \"\" && rlValue) {\n      constPlaceholder = \"\";\n    } else {\n      constPlaceholder = placeholder;\n    }\n    onInputs = false;\n  };\n\n  const closeTooltip = (event: any) => {\n    setOpen((richIsOpen = !richIsOpen));\n  };\n\n  return (\n    <section className=\"formated-field\">\n      <span className=\"placeholder\">{constPlaceholder}</span>\n      <input\n        ref={fieldRef}\n        className=\"input\"\n        type=\"text\"\n        disabled={disabled}\n        minLength={maxLength}\n        onChange={onChangeInput}\n        onInput={replaceSymbol}\n      ></input>\n      <div ref={errorIcon} className=\"errorName\">\n        <BaseButton\n          name=\"question_mark\"\n          size=\"base\"\n          theme={theme}\n          onAction={closeTooltip}\n        ></BaseButton>\n      </div>\n      <div className=\"richTooltip\" ref={richTooltip}>\n        {richIsOpen && (\n          <RichTooltip\n            theme={theme}\n            tailPlacement={\"L\"}\n            textRich={textRich}\n            onHandleCloseClick={() => closeTooltip}\n          ></RichTooltip>\n        )}\n      </div>\n    </section>\n  );\n};\nexport default FormatedTextField;\n"],"names":[],"sourceRoot":""}