{"version":3,"file":"src_feature_buttons_base-button_base-button_component_tsx.1d2ff691f74173b860ff.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA","sources":["webpack://storybook-react/./src/feature/buttons/base-button/base-button.component.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport './base-button.style.scss';\nimport { SizeProps, ThemeProps } from \"../../../shared/defaultProps\";\n\nexport interface BaseButtonProps extends SizeProps, ThemeProps{\n  name: string;\n  isOwner?: boolean;\n}\n\nexport class BaseButton extends Component<BaseButtonProps> {\n  private baseBtnEl: React.RefObject<HTMLButtonElement>;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.baseBtnEl = React.createRef<HTMLButtonElement>();\n    this.removeFocus = this.removeFocus.bind(this);\n  }\n\n  componentDidMount() {\n    const { disabled } = this.props;\n    if (disabled && this.baseBtnEl.current) {\n      this.baseBtnEl.current.disabled = true;\n    }\n  }\n\n  componentDidUpdate(prevProps: BaseButtonProps) {\n    const { disabled } = this.props;\n    if (prevProps.disabled !== disabled && this.baseBtnEl.current) {\n      this.baseBtnEl.current.disabled = disabled ?? false;\n    }\n  }\n\n  removeFocus() {\n    if (this.baseBtnEl.current) {\n      this.baseBtnEl.current.blur();\n    }\n  }\n\n  getClasses() {\n    const { isOwner, size, theme, disabled } = this.props;\n    const mode = isOwner ? 'with-owner' : '';\n    if (disabled) {\n      return `symbol-size--${size} symbol-theme--disabled--${theme} symbol-disabled ${mode}`;\n    }\n    return `symbol-size--${size} symbol-theme--${theme} ${mode}`;\n  }\n\n  renderIcon() {\n    const { name } = this.props;\n\t<button className='base-btn'>\n\n\t</button>\n    \n\n    return null;\n  }\n\n  render() {\n    return (\n      <button\n        ref={this.baseBtnEl}\n        className={`container ${this.getClasses()}`}\n        onClick={this.removeFocus}\n      >\n        {this.renderIcon()}\n      </button>\n    );\n  }\n}\n\nexport default BaseButton;\n"],"names":[],"sourceRoot":""}