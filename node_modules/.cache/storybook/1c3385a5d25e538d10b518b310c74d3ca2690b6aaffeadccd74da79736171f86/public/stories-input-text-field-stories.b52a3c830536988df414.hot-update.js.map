{"version":3,"file":"stories-input-text-field-stories.b52a3c830536988df414.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgBA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAOA;AAEA","sources":["webpack://storybook-react/./src/feature/input/text-field/text-field.component.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./text-field.style.scss\";\nimport { LabelComponent } from \"../../atoms/label/label.component\";\n\ninterface TextFieldProps {\n  type?: string;\n  placeholder: string;\n  showHint?: boolean;\n  hint?: string;\n  autofocus?: boolean;\n  value: string;\n  disabled?: boolean;\n  theme: \"light-theme\" | \"dark-theme\";\n  onChange: (value: string) => void;\n  onInput: (value: string) => void;\n  isValid?: boolean;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({\n  type = \"text\",\n  placeholder,\n  showHint = false,\n  hint = \"\",\n  autofocus = false,\n  value,\n  disabled = false,\n  theme,\n  onChange,\n  onInput,\n  isValid = true,\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const hintRef = useRef<HTMLDivElement | null>(null);\n  const [internalValue, setInternalValue] = useState(value);\n\n  useEffect(() => {\n    if (autofocus && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [autofocus]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInternalValue(event.target.value);\n    onChange(event.target.value);\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onInput(event.target.value);\n  };\n\n  const handleInvalid = () => {\n    if (inputRef.current) {\n      inputRef.current.classList.add(\"error\");\n      if (disabled) {\n        inputRef.current.classList.add(\"error--disabled\");\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      if (!isValid) {\n        inputRef.current.classList.add(\"error\");\n      } else {\n        inputRef.current.classList.remove(\"error\");\n      }\n    }\n  }, [isValid]);\n\n  useEffect(() => {\n    if (showHint && inputRef.current && hint) {\n      const hintWidth = inputRef.current.offsetWidth;\n      inputRef.current.style.paddingRight = `${hintWidth}px`;\n    }\n  }, [showHint, hint]);\n\n  return (\n    <div className={`text-field-container ${theme}`}>\n      <input\n        ref={inputRef}\n        type={type}\n        placeholder={placeholder}\n        disabled={disabled}\n        value={internalValue}\n        onChange={handleChange}\n        onInput={handleInput}\n        className={`input--${disabled ? \"disabled\" : \"enabled\"} ${theme}`}\n      />\n      {showHint && hint && (\n        <div id=\"hint-container\" ref={hintRef}>\n          <LabelComponent\n            isOwner={true}\n            label={hint}\n            size={\"base\"}\n            theme={theme}\n          >\n          </LabelComponent>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextField;\n"],"names":[],"sourceRoot":""}