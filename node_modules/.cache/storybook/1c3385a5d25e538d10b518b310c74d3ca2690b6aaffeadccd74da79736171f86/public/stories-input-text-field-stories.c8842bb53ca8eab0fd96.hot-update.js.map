{"version":3,"file":"stories-input-text-field-stories.c8842bb53ca8eab0fd96.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAaA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://storybook-react/./src/feature/input/text-field/text-field.component.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TextField.css';\n\nconst TextField = ({\n  placeholder = '',\n  showHint = false,\n  hint = '',\n  autofocus = false,\n  maxLength,\n  minLength,\n  value: initialValue = '',\n  onChange,\n  onInput,\n  disabled = false,\n  theme = 'light-theme',\n}) => {\n  const [value, setValue] = useState(initialValue);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (autofocus && inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    if (showHint && inputRef.current) {\n      const hintContainer = document.getElementById('hint-container');\n      if (hintContainer) {\n        const hintWidth = hintContainer.getBoundingClientRect().width;\n        inputRef.current.style.paddingRight = `${Math.round(hintWidth)}px`;\n      }\n    }\n  }, [autofocus, showHint]);\n\n  const handleInputChange = (e) => {\n    const newValue = e.target.value;\n    if (onInput) {\n      onInput(newValue);\n    }\n    setValue(newValue);\n  };\n\n  const handleBlur = () => {\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const getClasses = () => {\n    const classes = [`input--${theme}`];\n    if (disabled) {\n      classes.push(`input--disabled--${theme}`, 'input--disabled');\n    }\n    return classes.join(' ');\n  };\n\n  const makeInvalid = () => {\n    if (inputRef.current) {\n      inputRef.current.classList.add('error');\n      if (theme === 'dark-theme') {\n        inputRef.current.classList.add('error--dark');\n      }\n    }\n  };\n\n  return (\n    <div className=\"text-field-container\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder={placeholder}\n        maxLength={maxLength}\n        minLength={minLength}\n        value={value}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        disabled={disabled}\n        className={getClasses()}\n      />\n      {showHint && <div id=\"hint-container\" className=\"hint\">{hint}</div>}\n    </div>\n  );\n};\n\nTextField.propTypes = {\n  placeholder: PropTypes.string,\n  showHint: PropTypes.bool,\n  hint: PropTypes.string,\n  autofocus: PropTypes.bool,\n  maxLength: PropTypes.number,\n  minLength: PropTypes.number,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onInput: PropTypes.func,\n  disabled: PropTypes.bool,\n  theme: PropTypes.string,\n};\n\nexport default TextField;\n"],"names":[],"sourceRoot":""}