{"version":3,"file":"stories-input-text-field-stories.3df44b9df7ab3fe21a2d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAcA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAKA;AAEA","sources":["webpack://storybook-react/./src/feature/input/text-field.component.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './text-field.style.scss';\ninterface TextFieldProps {\n  type?: string;\n  placeholder: string;\n  showHint?: boolean;\n  hint?: string;\n  autofocus?: boolean;\n  value: string;\n  disabled?: boolean;\n  theme: 'light-theme'\n  onChange: (value: string) => void;\n  onInput: (value: string) => void;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({\n  type = 'text',\n  placeholder,\n  showHint = false,\n  hint = '',\n  autofocus = false,\n  value,\n  disabled = false,\n  onChange,\n  onInput,\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [internalValue, setInternalValue] = useState(value);\n  \n  // Handle autofocus\n  useEffect(() => {\n    if (autofocus && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [autofocus]);\n\n  // Handle value changes\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInternalValue(event.target.value);\n    onChange(event.target.value);\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onInput(event.target.value);\n  };\n\n  const handleInvalid = () => {\n    if (inputRef.current) {\n      inputRef.current.classList.add('error');\n      if (disabled) {\n        inputRef.current.classList.add('error--disabled');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (showHint && inputRef.current && hint) {\n      const hintWidth = inputRef.current?.getBoundingClientRect().width;\n      if (hintWidth && inputRef.current) {\n        inputRef.current.style.paddingRight = `${Math.round(hintWidth)}px`;\n      }\n    }\n  }, [showHint, hint]);\n\n  return (\n    <div className='text-field-container'>\n      <input\n        ref={inputRef}\n        type={type}\n        placeholder={placeholder}\n        disabled={disabled}\n        value={internalValue}\n        onChange={handleChange}\n        onInput={handleInput}\n        onInvalid={handleInvalid}\n        className={`input--${disabled ? 'disabled' : 'enabled'}`}\n      />\n      {showHint && hint && (\n        <div id=\"hint-container\">\n          <span className=\"hint\">{hint}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextField;\n"],"names":[],"sourceRoot":""}