{"version":3,"file":"stories-input-formated-field-stories.ac0c9fa0e2b253bb0d08.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAIA;AAUA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://storybook-react/./src/stories/input/formated-field.stories.tsx","webpack://storybook-react/./src/feature/input/formated-text/formated-text-field.component.tsx"],"sourcesContent":["import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport {FormatedTextField} from '../../feature/input/formated-text/formated-text-field.component';\n\nconst meta: Meta<typeof FormatedTextField> = {\n  title: 'Input/FormatedTextField',\n  component: FormatedTextField,\n  parameters: {\n    designToken: {\n      disable: true,\n    },\n  },\n  argTypes: {\n    theme: {\n      options: ['light-theme', 'dark-theme'],\n      control: { type: 'radio' },\n      table: { defaultValue: { summary: 'light-theme' } },\n    },\n    disabled: {\n      table: { defaultValue: { summary: 'false' } },\n    },\n    onInput: {\n      description: 'Callback - triggered on every input change',\n    },\n    onChange: {\n      description: 'Callback - triggered when the field value changes',\n    },\n    placeholder: {\n      description: 'Placeholder text for the input field',\n    },\n  },\n  decorators: [\n    (Story) => <div style={{ width: '300px' }}>{Story()}</div>,\n  ],\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof FormatedTextField>;\n\nexport const LightTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Light Theme' },\n  },\n  args: {\n    placeholder: 'Placeholder',\n    disabled: false,\n    theme: 'light-theme',\n    textRich: 'Информация, которую запросил пользователь. Очень короткий поясняющий текст к ней.'\n  },\n};\n\nexport const DarkTheme: Story = {\n  parameters: {\n    backgrounds: { default: 'Dark Theme' },\n  },\n  args: {\n    placeholder: 'Placeholder',\n    disabled: false,\n    theme: 'dark-theme',\n  },\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  RichTooltip,\n  RichTooltipProps,\n} from \"../../floating/rich-tooltil/rich-tooltip.component\";\nimport { BaseButton } from \"../../buttons/base-button/base-button.component\";\nimport { ThemeProps } from \"../../../shared/defaultProps\";\n\ninterface FormatedTextProps extends RichTooltipProps {\n  placeholder?: string;\n  rlValue: string;\n  onChange: (value: string) => void;\n  onInput: (value: string) => void;\n}\n\nexport const FormatedTextField: React.FC<FormatedTextProps> = ({\n  placeholder = \"\",\n  rlValue = \"\",\n  onChange,\n  onInput,\n  disabled = false,\n  theme = \"light-theme\",\n  textRich,\n  tailPlacement,\n}) => {\n  let [value, setValue] = useState(\"\");\n  let [maxLength, setMaxLength] = useState(placeholder.length);\n  let [richIsOpen, setOpen] = useState(false);\n  let [onInputs, setOnInputs] = useState(false);\n  let [constPlaceholder, setPlaceholder] = useState(placeholder);\n\n  const fieldRef = useRef<HTMLInputElement | null>(null);\n  const richTooltip = useRef<HTMLDivElement | null>(null);\n  const errorIcon = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (value !== \"\" && rlValue && !onInputs) {\n      constPlaceholder = \"\";\n    } else if (!onInputs) {\n      constPlaceholder = placeholder;\n    }\n    onChange(rlValue);\n  }, [rlValue]);\n\n  const replaceSymbol = (event: any) => {\n    onInputs = true;\n    const index = event.target.value.length - 1;\n    if (fieldRef.current) {\n      if (event.target.value == \"\" || !event.target.value) {\n        constPlaceholder = placeholder;\n      } else if (\n        constPlaceholder === placeholder ||\n        (event.target.value !== \"\" && constPlaceholder !== \"\")\n      ) {\n        const arrPlaceholder = constPlaceholder.split(\"\");\n        arrPlaceholder[index] = fieldRef.current.value[index];\n        constPlaceholder = arrPlaceholder.join(\"\");\n      }\n    }\n  };\n  const onChangeInput = (event: any) => {\n    if (rlValue != \"\" && rlValue) {\n      constPlaceholder = \"\";\n    } else {\n      constPlaceholder = placeholder;\n    }\n    onChange(event.target.value);\n    onInputs = false;\n  };\n\n  const closeTooltip = (event: any) => {\n    setOpen((richIsOpen = !richIsOpen));\n  };\n\n  return (\n    <section className=\"formated-field\">\n      <span className=\"placeholder\">{constPlaceholder}</span>\n      <input\n        ref={fieldRef}\n        className=\"input\"\n        type=\"text\"\n        disabled={disabled}\n        minLength={maxLength}\n        onChange={onChangeInput}\n        onInput={replaceSymbol}\n      ></input>\n      <div ref={errorIcon} className=\"errorName\">\n        <BaseButton\n          name=\"question_mark\"\n          size=\"base\"\n          theme={theme}\n          onAction={closeTooltip}\n        ></BaseButton>\n      </div>\n      <div className=\"richTooltip\" ref={richTooltip}>\n        <RichTooltip \n            theme={theme}\n            tailPlacement={tailPlacement}\n            textRich={textRich}\n            onHandleCloseClick={()=>closeTooltip}\n        ></RichTooltip>\n      </div>\n    </section>\n  );\n};\nexport default FormatedTextField;"],"names":[],"sourceRoot":""}