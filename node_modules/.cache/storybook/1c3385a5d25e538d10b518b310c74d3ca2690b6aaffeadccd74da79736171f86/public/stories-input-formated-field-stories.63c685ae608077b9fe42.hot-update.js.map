{"version":3,"file":"stories-input-formated-field-stories.63c685ae608077b9fe42.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AAUA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAKA;AAEA","sources":["webpack://storybook-react/./src/feature/input/formated-text/formated-text-field.component.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  RichTooltip,\n  RichTooltipProps,\n} from \"../../floating/rich-tooltil/rich-tooltip.component\";\nimport { BaseButton } from \"../../buttons/base-button/base-button.component\";\nimport { ThemeProps } from \"../../../shared/defaultProps\";\n\ninterface FormatedTextProps extends RichTooltipProps {\n  placeholder?: string;\n  rlValue: string;\n  onChanges: (value: string) => void;\n  onInput: (value: string) => void;\n}\n\nexport const FormatedTextField: React.FC<FormatedTextProps> = ({\n  placeholder = \"\",\n  rlValue = \"\",\n  onChanges,\n  onInput,\n  disabled = false,\n  theme = \"light-theme\",\n  textRich,\n  tailPlacement,\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [maxLength, setMaxLength] = useState(placeholder.length);\n  const [richIsOpen, setOpen] = useState(false);\n  const [onInputs, setOnInputs] = useState(false);\n  const [constPlaceholder, setPlaceholder] = useState(placeholder);\n\n  const fieldRef = useRef<HTMLInputElement | null>(null);\n  const richTooltip = useRef<HTMLDivElement | null>(null);\n  const errorIcon = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (value !== \"\" && rlValue && !onInputs) {\n      setPlaceholder(\"\"); // update state for placeholder\n    } else if (!onInputs) {\n      setPlaceholder(placeholder); // update state for placeholder\n    }\n    onChanges(rlValue);\n  }, [rlValue, value, placeholder, onInputs, onChanges]);\n\n  const replaceSymbol = (event: React.FormEvent<HTMLInputElement>) => {\n    setOnInputs(true);\n    const index = event.currentTarget.value.length - 1;\n    if (fieldRef.current) {\n      if (event.currentTarget.value === \"\" || !event.currentTarget.value) {\n        setPlaceholder(placeholder); // update placeholder\n      } else if (\n        constPlaceholder === placeholder ||\n        (event.currentTarget.value !== \"\" && constPlaceholder !== \"\")\n      ) {\n        const arrPlaceholder = constPlaceholder.split(\"\");\n        arrPlaceholder[index] = fieldRef.current.value[index];\n        setPlaceholder(arrPlaceholder.join(\"\")); // update placeholder\n      }\n    }\n  };\n\n  const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (rlValue !== \"\" && rlValue) {\n      setPlaceholder(\"\"); // update placeholder\n    } else {\n      setPlaceholder(placeholder); // update placeholder\n    }\n    onChanges(event.target.value); // pass the updated value\n    setOnInputs(false);\n  };\n\n  const closeTooltip = () => {\n    setOpen((prevState) => !prevState);\n  };\n\n  return (\n    <section className=\"formated-field\">\n      <span className=\"placeholder\">{constPlaceholder}</span>\n      <input\n        ref={fieldRef}\n        className=\"input\"\n        type=\"text\"\n        disabled={disabled}\n        minLength={maxLength}\n        onChange={onChangeInput}\n        onInput={replaceSymbol}\n      ></input>\n      <div ref={errorIcon} className=\"errorName\">\n        <BaseButton\n          name=\"question_mark\"\n          size=\"base\"\n          theme={theme}\n          onAction={closeTooltip}\n        ></BaseButton>\n      </div>\n      <div className=\"richTooltip\" ref={richTooltip}>\n        <RichTooltip \n            theme={theme}\n            tailPlacement={tailPlacement}\n            textRich={textRich}\n            onHandleCloseClick={()=>closeTooltip} // fixed closure issue\n        ></RichTooltip>\n      </div>\n    </section>\n  );\n};\n\nexport default FormatedTextField;\n"],"names":[],"sourceRoot":""}