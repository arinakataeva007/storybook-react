"use strict";
self["webpackHotUpdatestorybook_react"]("stories-atoms-toggle-check-stories",{

/***/ "./src/feature/atoms/toggle-check/toggle-check.tsx":
/*!*********************************************************!*\
  !*** ./src/feature/atoms/toggle-check/toggle-check.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ToggleCheckComponent: () => (/* binding */ ToggleCheckComponent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

class ToggleCheckComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(props){
        super(props);
        this.state = {
            value: this.props.value || false,
            touched: false
        };
    }
    // Simulate Angular's ControlValueAccessor methods
    static getDerivedStateFromProps(nextProps, nextState) {
        if (nextProps.value !== nextState.value) {
            return {
                value: nextProps.value
            };
        }
        return null;
    }
    // Handles changes in the checkbox
    handleCheckChange = (e)=>{
        const newValue = e.target.checked;
        this.setState({
            value: newValue
        }, ()=>{
            this.props.onChange(newValue);
            this.props.onBlur();
        });
    };
    // Handle the blur event
    handleBlur = ()=>{
        if (!this.state.touched) {
            this.setState({
                touched: true
            }, ()=>{
                this.props.onBlur();
            });
        }
    };
    render() {
        const { toggleId, disabled, theme } = this.props;
        const { value } = this.state;
        // Apply class names based on the theme and disabled state
        const toggleClass = disabled ? `toggle--${theme} toggle--disabled--${theme}` : `toggle--${theme}`;
        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
            id: toggleId,
            type: "checkbox",
            checked: value,
            onChange: this.handleCheckChange,
            onBlur: this.handleBlur,
            disabled: disabled,
            className: "toggle-check"
        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
            htmlFor: toggleId,
            className: `toggle-btn ${toggleClass}`
        }));
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ToggleCheckComponent);
ToggleCheckComponent.__docgenInfo = {
    "description": "",
    "methods": [
        {
            "name": "handleCheckChange",
            "docblock": null,
            "modifiers": [],
            "params": [
                {
                    "name": "e",
                    "optional": false,
                    "type": {
                        "name": "ReactChangeEvent",
                        "raw": "React.ChangeEvent<HTMLInputElement>",
                        "elements": [
                            {
                                "name": "HTMLInputElement"
                            }
                        ],
                        "alias": "React.ChangeEvent"
                    }
                }
            ],
            "returns": null
        },
        {
            "name": "handleBlur",
            "docblock": null,
            "modifiers": [],
            "params": [],
            "returns": null
        }
    ],
    "displayName": "ToggleCheckComponent",
    "props": {
        "toggleId": {
            "required": true,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "value": {
            "required": true,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "onChange": {
            "required": true,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "(value: boolean) => void",
                "signature": {
                    "arguments": [
                        {
                            "type": {
                                "name": "boolean"
                            },
                            "name": "value"
                        }
                    ],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "onBlur": {
            "required": true,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "theme": {
            "required": true,
            "tsType": {
                "name": "string"
            },
            "description": ""
        }
    }
};


/***/ })

});
//# sourceMappingURL=stories-atoms-toggle-check-stories.064becacac7728a8476d.hot-update.js.map