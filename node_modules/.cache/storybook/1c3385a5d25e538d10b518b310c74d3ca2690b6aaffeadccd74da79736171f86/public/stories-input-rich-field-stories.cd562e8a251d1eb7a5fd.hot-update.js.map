{"version":3,"file":"stories-input-rich-field-stories.cd562e8a251d1eb7a5fd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAmBA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAGA","sources":["webpack://storybook-react/./src/feature/input/rich-text-field/rich-text.component.tsx"],"sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport './rich-text.style.scss';\n\n// Определяем типы пропсов компонента\ninterface RichTextFieldProps {\n  placeholder?: string;\n  hint?: string;\n  showHint?: boolean;\n  theme?: string;\n  onInputChange?: (value: string) => void;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n}\n\n// Определяем интерфейс для рефа\nexport interface RichTextFieldRef {\n  setValue: (newValue: string) => void;\n  getValue: () => string;\n}\n\nexport const RichTextField = forwardRef<RichTextFieldRef, RichTextFieldProps>(\n  (\n    {\n      placeholder = '',\n      hint = '',\n      showHint = false,\n      theme = '',\n      onInputChange,\n      onValueChange,\n      disabled = false,\n    },\n    ref\n  ) => {\n    const [value, setValue] = useState<string>('');\n\n    const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const newValue = event.target.value;\n      setValue(newValue);\n      if (onInputChange) onInputChange(newValue);\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const newValue = event.target.value;\n      setValue(newValue);\n      if (onValueChange) onValueChange(newValue);\n    };\n\n    // Используем useImperativeHandle для предоставления методов рефа\n    useImperativeHandle(ref, () => ({\n      setValue: (newValue: string) => setValue(newValue),\n      getValue: () => value,\n    }));\n\n    return (\n      <div className='rich'>\n        <textarea\n          className={`rich-text-field ${theme === 'dark-theme' ? 'dark-theme' : ''}`}\n          placeholder={placeholder}\n          disabled={disabled}\n          value={value}\n          onInput={handleInput}\n          onChange={handleChange}\n        ></textarea>\n        {showHint && <div className=\"hint-container-rich\">{hint}</div>}\n      </div>\n    );\n  }\n);\n\nexport default RichTextField;\n"],"names":[],"sourceRoot":""}