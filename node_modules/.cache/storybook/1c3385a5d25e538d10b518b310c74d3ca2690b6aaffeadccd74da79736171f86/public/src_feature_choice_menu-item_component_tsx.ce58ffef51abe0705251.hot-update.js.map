{"version":3,"file":"src_feature_choice_menu-item_component_tsx.ce58ffef51abe0705251.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AAEA","sources":["webpack://storybook-react/./src/feature/floating/pop-up.component.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ScrollGroup from '../../feature/cells/scroll-group.component'; // Make sure the path is correct for your ScrollGroup component\nimport './pop-up.style.scss';\ninterface PopUpProps {\n  isModal?: boolean;\n  scroll?: boolean;\n  theme: string;\n  children: React.ReactNode;\n}\n\nconst PopUp: React.FC<PopUpProps> = ({ isModal = false, scroll = false, theme, children }) => {\n  const popUpRef = useRef<HTMLDivElement>(null);\n  const scrollGroupRef = useRef<HTMLDivElement>(null);\n  const [fullHeightContent, setFullHeightContent] = useState(0);\n\n  useEffect(() => {\n    if (scrollGroupRef.current) {\n      setFullHeightContent(scrollGroupRef.current.scrollHeight);\n    }\n  }, [children]);\n\n  // Add classes conditionally based on props\n  const classes = [\n    'popUp-container',\n    scroll ? 'popUp-with-scroll' : '',\n    !isModal ? 'resizing' : '',\n  ].join(' ');\n\n  useEffect(() => {\n    if (popUpRef.current && scrollGroupRef.current) {\n      popUpRef.current.style.maxHeight = `${fullHeightContent + 16}px`;\n    }\n  }, [fullHeightContent]);\n\n  return (\n    <div ref={popUpRef} className={classes}>\n      <ScrollGroup ref={scrollGroupRef} orientation=\"vertical\" theme={theme}>\n        <div style={{ display: 'contents' }}>\n          {children}\n        </div>\n      </ScrollGroup>\n    </div>\n  );\n};\n\nexport default PopUp;\n"],"names":[],"sourceRoot":""}